# -*- coding: utf-8 -*-
"""1. Feature Selection- Dropping Constant Features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6UneyrZwwpfNgEKMOpatyK-CfBQW660

### Feature Selection- Dropping constant features
In this step we will be removing the features which have constant features which are actually not important
for solving the problem statement
"""

# Import pandas to create DataFrame
import pandas as pd

# Make DataFrame of the given data
data = pd.DataFrame({"A":[1,2,4,1,2,4],
                    "B":[4,5,6,7,8,9],
                    "C":[0,0,0,0,0,0],
                    "D":[1,1,1,1,1,1]})

data.head()

"""##### Variance Threshold
Feature selector that removes all low-variance features.

This feature selection algorithm looks only at the features (X), not the desired outputs (y), and can thus be used for unsupervised learning.
"""

### It will remove zero variance features
from sklearn.feature_selection import VarianceThreshold
var_thres=VarianceThreshold(threshold=0)
var_thres.fit(data)

var_thres.get_support()

data.columns[var_thres.get_support()]

constant_columns = [column for column in data.columns
                    if column not in data.columns[var_thres.get_support()]]

print(len(constant_columns))

for feature in constant_columns:
     print(feature)

data.drop(constant_columns,axis=1)

"""# Lets practise on bigger dataset

"""

import pandas as pd
from sklearn.feature_selection import VarianceThreshold

df=pd.read_csv('santander.csv',nrows=10000)

df.shape

df.head()

X=df.drop(labels=['TARGET'], axis=1)
y=df['TARGET']

from sklearn.model_selection import train_test_split
# separate dataset into train and test
X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.3,random_state=0)

X_train.shape, X_test.shape

"""#### Lets apply the variance threshold"""

var_thres=VarianceThreshold(threshold=0)
var_thres.fit(X_train)

#var_thres.get_support()

### Finding non constant features
sum(var_thres.get_support())

# Lets Find non-constant features
len(X_train.columns[var_thres.get_support()])

constant_columns = [column for column in X_train.columns
                    if column not in X_train.columns[var_thres.get_support()]]

print(len(constant_columns))

#for column in constant_columns:
   # print(column)

p=X_train.drop(constant_columns,axis=1)
p

p.shape

